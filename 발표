//웹에서 이벤트가 사용되는 경우는 다음과 같습니다

세션의 생선,소멸 속성의 변경 컨텍스트초기화//

인사말// (피피티가 켜진다

안녕하세요 우리는 1 팀 불꽃놀이 입니다. 저는 발표를 맡게된 ~~~입니다



목차//

일단 발표를 시작하기 앞서 목차를 살펴보겠습니다.

첫번째 리스너의 개념
두번째 리스너의 동작 구조
새번째 리스너의 종류와 인터페이스
네번째 인터페이스를 구현
마지막으로 예제를 들어 리스너에대해 알아보도록
하겠습니다

처음으로 설명할 것은 리스너의 개념입니다.

리스너란.

웹 어플리케이션의 상태를 모니터링 할 수 있도록
웹 어플리케이션의 시작에서 종료까지 주요한 사건이나 상태 변화에 대한 알림 기능을 제공합니다 

즉 서블릿 컨테이너가 상태 변화를 통지해 주는 기능을 하고

리스너 클래스는 이러한 변화에 응답하여 동작하는 일종의 서블릿으로 
웹 애플리케이션 시작 및 운영 종료 과정에서 발생하는 특정 상황에 필요한 작업을 처리하기 위해 사용 한다고 합니다.

흔히 말하는 이벤트 핸들러라고 할 수 있습니다.


리스너를 사용하기 위해서는 다음과 같은 등록방법이 있습니다.


첫번째. xml에 리스너 엘리먼트를 사용하여 구현한 리스너 클래스를 등록
두번째. 애노테이션을 통해서 리스너 클래스 등록이 가능합니다.


동작구조//
다음으로 넘어가 리스너의 동작 구조를 설명하겠습니다.

웹 어플리케이션에서 이벤트가 발생할때 리스너 인터페이스를 구현한 리스너 클래스가 
해당 이벤트를 감지하고 참고할 수 있도록한다.

리스너 동작이 끝나면 Load-on-startup 으로 설정된 일반 서블릿이 실행됩니다.
Load-on-startup 이란? 
다들 아시다시피 서블릿은 최초 요청시 초기화 됩니다. 
클래스 로딩 인스턴스화 초기화 설정을 해야합니다.
이렇게 되면 서버에 올라가고 맨 처음 호출한 유저는 보통시간보다 오래 걸리게 됩니다.  
시간을 줄이기 위해 Load-on-startup 있다고 생각하시면 되겠습니다.
숫자가 0보다 크면 서버가 시작되면서 서블릿을 초기화 합니다. 
가령 0보다 큰 값 3, 4 가 들어와도 1개만 띄우는것이 아니고 가장 낮은 수를 가장먼저 초기화 합니다.
그럼 모든 서블릿을 1로 하면 이라는 질문이 나올텐데요 ? 
그럴 경우 먼저 작성된 서블릿부터 초기과 됩니다.





리스너의 종류와 인터페이스//

다음으로 리스너의 종류와 인터페이스를 설명하겠습니다.

리스너는 세가지로 분류할수있는데 웹어플리케이션,세션,요청이 있습니다.


웹어플리케이션안에 서블릿 컨텍스트영역이란 웹 어플맄이션이 종료될때까지유지되는객체이고 여기에 담긴값들은 모든서블릿들이 공유할수잇습니다. 그럼으로 웹어플리 케이션이 실행되는 동안 모든서블릿의 공유를원한다면 이 객체안에 저장하는것이 유용합니다.



웹어플리케이션에 있는 인터페이스부터 설명하겠습니다.

ServletContextListener(서블릿컨텍스트리스너)의 경우 인터페이스 구현을 통해 리스너 클래스는

서버 시작과 함께 서블릿 컨텍스트 객체가 생성되고

 리스너 클래스안의 contextInitialized(컨택스트이니셜라이즈) 메서드에서는 
웹 어플리케이션이 시작될때 
서블릿 컨텍스트 객체의 생성을 알려주는 메서드입니다.

 그리고 contextDestoryed(컨텍스트디스트로이)라는 메소드는 웹 어플리케이션이 종료될때 서블릿 컨텍스트의 객체가 사라짐을 알려주는 메소드입니다.

ServletContextAttributeListener(서블릿컨텍스트어트리뷰트리스너)의 경우 

서블릿 컨텍스트에 저장된 속성 값들의 변화가 있을 때 수행하기 위한 메소드를 정의한 인터페이스입니다.

attributeAdded(어트리뷰트에디드e) : void (가르키며)값을 추가

attributeRemoved(어트리뷰트리무브) : void (가르키며)값을 삭제

attributeReplaced(어트리뷰트리플레이스) : void (가르키며)값을 변경할때

알려주는 메서드들 입니다.

3-2


다음으로 세션 영역에 있는 인터페이스를 설명하겠습니다.
설명하기 앞서 세션영역은
클라이언트가 서버에 접속해 있는 시간을 말합니다.
전문적인 말로 프로세스들 간에 통신을 하기 위해 메시지 교환을 통해 서로 인식한(접속한) 이후로부터
통신을 마칠 때까지(접속을 종료할 때까지)의 기간을 뜻합니다.


세션영역의 이벤트를 감지하는 HttpSessionListener(에이치티티피세션리스너) 를 구현한 클래스 내에
sessionCreated(세션크리에이티드) : void 메서드는 세션 영역이 생성되었을때 알려주는 메서드 이고
sessionDestoryed(세션디스트로이) : void 메서드는 세션영역이 소멸되었을때 알려주는 메서드입니다.
'세션 만료' 라는 말을 들어봐을 것입니다.
사용자가 인터넷 서핑을 하다가 해당 사이트에서 아무런 행동을 하지 않았을 경우
보안상의 문제로 세션을 만료시켜 페이지 새로고침을 요구하는 경우에 사용되기도 합니다.
일반적인 세션의 지속시간은 30분이며, 시간은 자유롭게 설정할 수 있습니다..
여러 방법이 있지만, 그 중 톰캣에 웹 어플리케이션을 설치할 때
web.xml 파일 내에서 <session-timeout>(세션타임아웃) 태그를 사용하여 표준 세션 타임아웃 시간을 지정해 주는 방법이 있습니다.
만약 사용되는 세션이 자동 삭제되지 않게 하기 위해서는 값을 -1로 지정해줍니다
최소 단위가 '분'입니다. 이 과정은 잠시후 구현해 보여드리겠습니다.


HttpSessionActivationListener(에이치티티피세션엑티베이션리스너) 는 조사를 했는데 깊게 알수가 없어 간단하게 설명해드리겠습니다.HttpSessionActivationListener 인터페이스를 구현한 클래스로 만들어진 객체가 세션에 추가되면,
 이 객체는 세션이 active(엑티브) 상태나 passive(패시브) 상태가 될때마다 event 알림을 받습니다.

sessionDidActivate(세션디드엑티브) : void 는 세션이 활성화 될 때 실행
sessionWillPassivate(세션윌패시배이트) : void 세션이 비활성화 되려고 할 때 실행된다고 합니다.


HttpSessionAttributeListener(에이치티티피세션어트리뷰트리스너) 는 HTTP 세션에 대한 속성 값이 변경되었을 경우에 수행하기 위한 인터페이스입니다.

attributeAdded(어트리뷰트에디드) : void    세션에 새로운 속성 값이 추가
attributeRemoved(어트리뷰트리무브) : void  제거
attributeReplaced(어트리뷰트리플레이스) : void 변경될 때 실행 됩닙다.

3-3




다음으로 요청영역의 이벤트를 감지하는 ServletRequestListener(서블릿리퀘스트리스너)를 구현한 클래스 내에 
requestDestroyed(리퀘스트디스트로이) :void 요청이 서블릿으로 넘어가기 전 실행

requestInitialized(리퀘스트이니셜라이즈):void 요청이 없어지기 전 실행되는 메서드입니다.

ServletRequestAttributeListener는 ServletRequest에 값을 추가하고,제거하고, 대체하기위한 인터페이습니다.

attributeAdded(HttpSessionBindingEvent event)
(세션에 새로운 속성 값이 추가될 때 실행)
attributeRemoved(HttpSessionBindingEvent event)
(세션의 속성 값이 제거될 실행)
attributeReplaced(HttpSessionBindingEvent event)
(세션의 속성 값이 변경될 때 실행)
